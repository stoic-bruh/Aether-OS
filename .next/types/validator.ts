// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ..\..\app\assistant\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\assistant\\page.js")
  handler satisfies AppPageConfig<"/assistant">
}

// Validate ..\..\app\gamification\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\gamification\\page.js")
  handler satisfies AppPageConfig<"/gamification">
}

// Validate ..\..\app\import\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\import\\page.js")
  handler satisfies AppPageConfig<"/import">
}

// Validate ..\..\app\journal\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\journal\\page.js")
  handler satisfies AppPageConfig<"/journal">
}

// Validate ..\..\app\knowledge-graph\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\knowledge-graph\\page.js")
  handler satisfies AppPageConfig<"/knowledge-graph">
}

// Validate ..\..\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\..\app\planner\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\planner\\page.js")
  handler satisfies AppPageConfig<"/planner">
}

// Validate ..\..\app\practice\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\practice\\page.js")
  handler satisfies AppPageConfig<"/practice">
}

// Validate ..\..\app\resources\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\resources\\page.js")
  handler satisfies AppPageConfig<"/resources">
}

// Validate ..\..\app\study-logs\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\study-logs\\page.js")
  handler satisfies AppPageConfig<"/study-logs">
}

// Validate ..\..\app\tasks\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\tasks\\page.js")
  handler satisfies AppPageConfig<"/tasks">
}

// Validate ..\..\app\utilities\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\utilities\\page.js")
  handler satisfies AppPageConfig<"/utilities">
}

// Validate ..\..\app\api\ai\chat\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\ai\\chat\\route.js")
  handler satisfies RouteHandlerConfig<"/api/ai/chat">
}

// Validate ..\..\app\api\ai\motivation\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\ai\\motivation\\route.js")
  handler satisfies RouteHandlerConfig<"/api/ai/motivation">
}

// Validate ..\..\app\api\ai\suggestion\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\ai\\suggestion\\route.js")
  handler satisfies RouteHandlerConfig<"/api/ai/suggestion">
}

// Validate ..\..\app\api\bridge\import\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\bridge\\import\\route.js")
  handler satisfies RouteHandlerConfig<"/api/bridge/import">
}

// Validate ..\..\app\api\journal\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\journal\\route.js")
  handler satisfies RouteHandlerConfig<"/api/journal">
}

// Validate ..\..\app\api\logs\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\logs\\route.js")
  handler satisfies RouteHandlerConfig<"/api/logs">
}

// Validate ..\..\app\api\notes\[id]\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\notes\\[id]\\route.js")
  handler satisfies RouteHandlerConfig<"/api/notes/[id]">
}

// Validate ..\..\app\api\notes\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\notes\\route.js")
  handler satisfies RouteHandlerConfig<"/api/notes">
}

// Validate ..\..\app\api\resources\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\resources\\route.js")
  handler satisfies RouteHandlerConfig<"/api/resources">
}

// Validate ..\..\app\api\tasks\[id]\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\tasks\\[id]\\route.js")
  handler satisfies RouteHandlerConfig<"/api/tasks/[id]">
}

// Validate ..\..\app\api\tasks\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\tasks\\route.js")
  handler satisfies RouteHandlerConfig<"/api/tasks">
}





// Validate ..\..\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
